name: Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  S3_BUCKET: botm-deploy-665802315326-us-east-1
  CODEPLOY_APPLICATION: BeautyOnTheMoveApp
  CODEPLOY_DEPLOYMENT_GROUP: BeautyOnTheMoveDeploymentGroupWithoutBoundary

permissions:
  id-token: write
  contents: read

jobs:
  test-aws-connection:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAMROLE_GITHUB }}
          role-session-name: GitHubActions
          aws-region: us-east-1

      - name: Test AWS connection
        run: |
          set -e
          echo "🔍 Testing AWS connection..."
          aws sts get-caller-identity
          echo "✅ AWS connection successful!"

      - name: Test CodeDeploy access
        run: |
          set -e
          echo "🔍 Testing CodeDeploy access..."
          aws deploy list-applications
          echo "✅ CodeDeploy access successful!"

      - name: Test S3 access
        run: |
          set -e
          echo "🔍 Testing S3 access..."
          aws s3 ls
          echo "✅ S3 access successful!"

      - name: Test specific S3 bucket access
        run: |
          set -e
          echo "🔍 Testing specific S3 bucket access..."
          aws s3 ls s3://ktrapha-beautyonmove-android-deployments || { echo "❌ Bucket not found or no access"; exit 1; }
          echo "✅ S3 bucket test completed!"

  build-and-deploy:
    needs: test-aws-connection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAMROLE_GITHUB }}
          role-session-name: GitHubActions
          aws-region: us-east-1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install dependencies
        run: |
          set -e
          cd ..
          echo "📦 Installing npm dependencies..."
          npm install
          echo "✅ Dependencies installed successfully!"

      - name: Fix Gradle wrapper permissions
        run: |
          set -e
          cd ..
          echo "🔧 Fixing Gradle wrapper permissions..."
          
          # Check if gradlew exists in android directory
          if [ -f "android/gradlew" ]; then
            echo "✅ Found gradlew in android/gradlew"
            chmod +x android/gradlew
            echo "✅ Gradle wrapper permissions fixed!"
          elif [ -f "gradlew" ]; then
            echo "✅ Found gradlew in root directory"
            chmod +x gradlew
            echo "✅ Gradle wrapper permissions fixed!"
          else
            echo "❌ gradlew not found in expected locations"
            echo "Searching for gradlew files..."
            find . -name "gradlew" -type f
            exit 1
          fi

      - name: Build Android app
        run: |
          set -e
          cd ..
          echo "🔨 Building Android app..."
          
          # Set Android environment variables
          export ANDROID_HOME=$ANDROID_SDK_ROOT
          export PATH=$PATH:$ANDROID_HOME/emulator
          export PATH=$PATH:$ANDROID_HOME/tools
          export PATH=$PATH:$ANDROID_HOME/tools/bin
          export PATH=$PATH:$ANDROID_HOME/platform-tools
          
          # Fix line endings in gradle files
          echo "🔄 Fixing line endings in gradle files..."
          find android -name "*.gradle" -exec sed -i 's/\r$//' {} \;
          find android -name "*.properties" -exec sed -i 's/\r$//' {} \;
          
          # Build using gradle
          echo "🏗️ Building with Gradle..."
          cd android
          
          # Fix gradlew permissions FROM THE ANDROID DIRECTORY
          echo "🔧 Fixing gradlew permissions..."
          chmod +x ./gradlew
          echo "✅ Gradlew permissions fixed!"
          
          # Verify gradlew is executable
          ls -la ./gradlew
          
          # Now run gradle commands
          echo "🧹 Running gradle clean..."
          ./gradlew clean
          echo "🏗️ Running gradle assembleRelease..."
          ./gradlew assembleRelease
          cd ..
          
          echo "🔍 Checking for APK files..."
          find . -name "*.apk" -type f || { echo "❌ No APK files found"; exit 1; }
          echo "✅ Build completed successfully!"

      - name: Debug - Check current directory and files
        run: |
          set -e
          echo "=== Current directory ==="
          pwd
          echo "=== Directory contents ==="
          ls -la
          echo "=== AWS scripts directory ==="
          ls -la aws/scripts/ || { echo "❌ aws/scripts/ not found"; exit 1; }

      - name: Create deployment package
        run: |
          set -e
          echo "📁 Creating deployment directory..."
          mkdir -p deployment
          
          echo "📦 Copying APK files..."
          cp -r ../android/app/build/outputs/apk/release/* deployment/ || { echo "❌ No APK files found"; exit 1; }
          
          echo "📄 Copying appspec.yml..."
          cp appspec.yml deployment/
          
          echo "📜 Copying scripts..."
          cp -r aws/scripts deployment/
          
          echo "📋 Deployment directory contents:"
          ls -la deployment/
          echo "📋 Scripts directory contents:"
          ls -la deployment/scripts/

      - name: Fix script permissions and line endings
        run: |
          set -e
          cd deployment
          echo "🔧 Current directory: $(pwd)"
          
          echo "🔧 Fixing script permissions and line endings..."
          
          # Check if scripts exist
          if [ ! -d "scripts" ]; then
            echo "❌ ERROR: scripts directory not found!"
            exit 1
          fi
          
          # List scripts before processing
          echo "📋 Scripts before processing:"
          ls -la scripts/
          
          # Convert Windows line endings to Unix (CRLF to LF) using tr
          echo "🔄 Using tr to fix line endings..."
          for script in scripts/*.sh; do
            echo "Converting line endings for $script..."
            tr -d '\r' < "$script" > "${script}.tmp" && mv "${script}.tmp" "$script"
          done
          
          # Make scripts executable
          echo "🔐 Making scripts executable..."
          chmod +x scripts/*.sh
          
          # Verify scripts are executable and have correct line endings
          echo "✅ Verifying scripts..."
          ls -la scripts/
          echo "📄 Checking script contents (first few lines):"
          for script in scripts/*.sh; do
            echo "=== $script ==="
            head -5 "$script"
            echo "=== End of $script ==="
          done
          
          # Test script execution
          echo "🧪 Testing script execution..."
          for script in scripts/*.sh; do
            echo "Testing $script..."
            bash -n "$script" && echo "✅ $script syntax OK" || { echo "❌ $script syntax error"; exit 1; }
          done

      - name: Debug - Check final deployment package
        run: |
          set -e
          cd deployment
          echo "📋 Final deployment package contents:"
          find . -type f -exec ls -la {} \;
          echo "📋 Script permissions:"
          ls -la scripts/

      - name: Upload to S3
        run: |
          set -e
          echo "☁️ Uploading to S3..."
          aws s3 cp deployment/ s3://ktrapha-beautyonmove-android-deployments/ --recursive
          echo "✅ Upload completed successfully!"

      - name: Deploy to CodeDeploy
        run: |
          set -e
          echo "🚀 Deploying to CodeDeploy..."
          aws deploy create-deployment \
            --application-name BeautyOnTheMoveApp \
            --deployment-group-name BeautyOnTheMoveDeploymentGroupWithoutBoundary \
            --s3-location bucket=ktrapha-beautyonmove-android-deployments,key=appspec.yml,bundleType=YAML \
            --deployment-config-name CodeDeployDefault.OneAtATime
          echo "✅ Deployment initiated successfully!"

      - name: Wait for deployment
        run: |
          set -e
          echo "⏳ Waiting for deployment to complete..."
          # This is a simplified wait - in production you'd want to check deployment status
          sleep 30
          echo "✅ Deployment wait completed!" 
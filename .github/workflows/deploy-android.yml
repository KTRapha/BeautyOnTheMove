name: Deploy Android App to AWS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1  # Change to your preferred region
  APPLICATION_NAME: BeautyOnTheMoveApp
  DEPLOYMENT_GROUP_NAME: BeautyOnTheMoveDeploymentGroupWithoutBoundary

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install
      
    - name: Set up Android SDK
      uses: android-actions/setup-android@v2
      
    - name: Fix gradlew permissions and line endings
      run: |
        cd android
        chmod +x gradlew
        # Convert Windows line endings to Unix line endings using tr
        tr -d '\r' < gradlew > gradlew.tmp && mv gradlew.tmp gradlew
        chmod +x gradlew
        cd ..
        
    - name: Debug environment
      run: |
        echo "Java version:"
        java -version
        echo "Gradle version:"
        cd android && ./gradlew --version && cd ..
        echo "Android SDK location:"
        echo $ANDROID_HOME
        echo "Build tools version:"
        ls $ANDROID_HOME/build-tools/
        
    - name: Build Android APK
      run: |
        cd android
        ./gradlew assembleRelease --info
        cd ..
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::665802315326:role/GitHubActionsCodeDeployRole-BeautyOnTheMove-Android-Stack
        role-session-name: GitHubActions
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Create deployment package
      run: |
        mkdir -p deployment-package
        cp android/app/build/outputs/apk/release/app-release.apk deployment-package/
        cp BeautyOnTheMove-Android/appspec.yml deployment-package/
        cp -r BeautyOnTheMove-Android/scripts deployment-package/
        
    - name: Upload to S3
      run: |
        aws s3 cp deployment-package/ s3://${{ secrets.NEW_S3_BUCKET_NAME }}/deployments/$(date +%Y%m%d-%H%M%S)/ --recursive
        
    - name: Create CodeDeploy deployment
      run: |
        echo "üöÄ Creating CodeDeploy deployment..."
        DEPLOYMENT_RESPONSE=$(aws deploy create-deployment \
          --application-name ${{ env.APPLICATION_NAME }} \
          --deployment-group-name ${{ env.DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=${{ secrets.NEW_S3_BUCKET_NAME }},key=deployments/$(date +%Y%m%d-%H%M%S)/,bundleType=zip \
          --deployment-config-name CodeDeployDefault.OneAtATime \
          --description "Deployment from GitHub Actions")
        
        echo "üìã Deployment Response: $DEPLOYMENT_RESPONSE"
        
        # Extract deployment ID from response
        DEPLOYMENT_ID=$(echo "$DEPLOYMENT_RESPONSE" | jq -r '.deploymentId')
        
        if [ "$DEPLOYMENT_ID" = "null" ] || [ -z "$DEPLOYMENT_ID" ]; then
          echo "‚ùå Failed to create deployment or get deployment ID"
          echo "Full response: $DEPLOYMENT_RESPONSE"
          exit 1
        fi
        
        echo "‚úÖ Deployment created successfully with ID: $DEPLOYMENT_ID"
        echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV
        
    - name: Get deployment ID and check status
      run: |
        echo "üîç Using deployment ID from previous step: ${{ env.DEPLOYMENT_ID }}"
        
        if [ -z "${{ env.DEPLOYMENT_ID }}" ]; then
          echo "‚ùå No deployment ID available from previous step"
          exit 1
        fi
        
        echo "üîç Checking deployment status..."
        aws deploy get-deployment --deployment-id "${{ env.DEPLOYMENT_ID }}"
        
        echo "üîç Checking deployment logs..."
        aws deploy get-deployment-target --deployment-id "${{ env.DEPLOYMENT_ID }}" --target-id "${{ env.DEPLOYMENT_ID }}" || echo "No target info available"
        
    - name: Wait for deployment with better error handling
      run: |
        echo "‚è≥ Waiting for deployment ${{ env.DEPLOYMENT_ID }} to complete..."
        
        if [ -z "${{ env.DEPLOYMENT_ID }}" ]; then
          echo "‚ùå No deployment ID available from previous step"
          exit 1
        fi
        
        # Wait for deployment with timeout and better error reporting
        if aws deploy wait deployment-successful --deployment-id "${{ env.DEPLOYMENT_ID }}" --cli-read-timeout 300; then
          echo "‚úÖ Deployment completed successfully!"
        else
          echo "‚ùå Deployment failed or timed out"
          echo "üîç Getting final deployment status..."
          aws deploy get-deployment --deployment-id "${{ env.DEPLOYMENT_ID }}"
          echo "üîç Getting deployment events..."
          aws deploy get-deployment-target --deployment-id "${{ env.DEPLOYMENT_ID }}" --target-id "${{ env.DEPLOYMENT_ID }}" || echo "No target info available"
          exit 1
        fi 